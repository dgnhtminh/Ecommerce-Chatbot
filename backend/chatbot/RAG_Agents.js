const Embeddings = require("./embedding.js");
const VectorDB = require("./vector_db.js");
const { getProducts } = require("./mongo_utils.js");
const { router } = require("./routerChatbot.js"); // router b·∫°n ƒë√£ vi·∫øt
const { initializeAgentExecutorWithOptions } = require("langchain/agents");
const { ChatOpenAI } = require("@langchain/openai");
const { DynamicTool } = require("@langchain/core/tools");
const checkStockTool = require("./tools/checkStockTool.js");
const addToCartTool = require("./tools/addToCartTool.js");
const checkOrdersTool  = require("./tools/checkOrdersTool.js");

const systemPrompt = `B·∫°n l√† m·ªôt nh√¢n vi√™n t∆∞ v·∫•n b√°n qu·∫ßn √°o chuy√™n nghi·ªáp t·∫°i c·ª≠a h√†ng Fashion.
X∆∞ng em v√† x∆∞ng kh√°ch h√†ng l√† anh/ch·ªã. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch r√µ r√†ng, th√¢n thi·ªán v√† d·ª±a ho√†n v√†o c√°c th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi.
Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin c√≥ trong d·ªØ li·ªáu. Kh√¥ng t·ª± t·∫°o ra th√¥ng tin n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p.
N·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi, h√£y l·ªãch s·ª± tr·∫£ l·ªùi r·∫±ng hi·ªán t·∫°i b·∫°n ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n ch√≠nh x√°c.
H√£y ∆∞u ti√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu. N·∫øu kh√°ch h·ªèi g·ª£i √Ω s·∫£n ph·∫©m, h√£y li·ªát k√™ m·ªôt v√†i m·∫´u ph√π h·ª£p v√† l√Ω do t·∫°i sao n√™n ch·ªçn.
Lu√¥n gi·ªØ th√°i ƒë·ªô l·ªãch s·ª±, chuy√™n nghi·ªáp v√† h·ªó tr·ª£ h·∫øt m√¨nh.`;

// ------------------ RAG ------------------
async function buildInformation(product) {
  return (
    `T√™n s·∫£n ph·∫©m: ${product.name || ""}\n` +
    `M√¥ t·∫£: ${product.description || ""}\n` +
    `Lo·∫°i: ${product.category || ""}\n` +
    `Gi√° m·ªõi: ${product.new_price || ""}\n` +
    `Gi√° c≈©: ${product.old_price || ""}\n` +
    `K√≠ch c·ª°: ${(product.sizes || []).join(", ")}\n`
  );
}

let vectorDB, embedding;
async function initRAG() {
  if (!vectorDB || !embedding) {
    vectorDB = new VectorDB();
    embedding = new Embeddings();

    const products = await getProducts();
    for (const product of products) {
      const id = String(product.id);
      const exists = await vectorDB.documentExists("products", { id });
      if (!exists) {
        const doc = await buildInformation(product);
        const emb = await embedding.encode(doc);
        await vectorDB.insertDocument("products", {
          information: doc,
          embedding: emb,
          id,
        });
      }
    }

    console.log(`RAG init xong ‚úÖ`);
  }
}

async function askQuestion(query, messages = []) {
  await initRAG();

  const queryEmbedding = await embedding.encode(query);
  const results = await vectorDB.query("products", queryEmbedding, 5);

  let context = "";
  for (const result of results) {
    context += result.information + "\n";
  }

  const systemContent =
    systemPrompt + (context ? `\nD·ªØ li·ªáu s·∫£n ph·∫©m li√™n quan:\n${context}` : "");

  const tempMessages = [
    { role: "system", content: systemContent },
    ...messages,
    { role: "user", content: query },
  ];

  const response = await embedding.client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: tempMessages,
  });

  return response.choices[0].message.content.trim();
}

// ------------------ AGENT ------------------
async function runAgent(query) {
  const llm = new ChatOpenAI({
    modelName: "gpt-4o-mini",
    temperature: 0,
  });

  const tools = [
    new DynamicTool({
      name: "check_stock",
      description: `Ki·ªÉm tra t·ªìn kho s·∫£n ph·∫©m trong c·ª≠a h√†ng qu·∫ßn √°o.`,
      func: async (input) => {
        try {
          let finalInput;

          if (typeof input === "string") {
            try {
              const parsed = JSON.parse(input);
              finalInput = parsed.input || parsed.query || input;
            } catch {
              finalInput = input;
            }
          } else if (typeof input === "object" && input !== null) {
            finalInput = input.input || input.query;
          }

          if (!finalInput) {
            return JSON.stringify({ error: "Input is missing." });
          }

          // G·ªçi tool g·ªëc
          const result = await checkStockTool({ input: finalInput });
          return JSON.stringify(result);
        } catch (err) {
          return JSON.stringify({
            error: "Invalid input format",
            detail: err.message,
          });
        }
      },
    }),
    new DynamicTool({
      name: "add_to_cart",
      description: `Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng.
        Input ph·∫£i l√† JSON object v·ªõi c√°c field:
        - name: T√™n s·∫£n ph·∫©m
        - size: K√≠ch th∆∞·ªõc s·∫£n ph·∫©m
        - quantity: S·ªë l∆∞·ª£ng s·∫£n ph·∫©m`,
      func: async(input) => {
        try {
          const { name, size, quantity } = JSON.parse(input)
          // G·ªçi tool g·ªëc
          const result = await addToCartTool({ name: name, size: size, quantity: quantity });
          return JSON.stringify(result);
        } catch (err) {
          return JSON.stringify({
              error: "Invalid input format",
              detail: err.message,
          });
        }
      }
    }),
    new DynamicTool({
      name: "check_orders",
      description: `Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng theo t·ª´ng ng√†y.
      Input ph·∫£i l√† JSON object:
      - date: ng√†y mu·ªën ki·ªÉm tra c√≥ d·∫°ng YYYY-MM-DD.`,
      func: async (input) => {
        try{
          let finalInput;
          
          if (typeof input === 'string') {
            const parsed = JSON.parse(input);
            console.log("üì¶ First parse result:", parsed);
            
            // LangChain wraps input in {"input": "..."} format
            if (parsed.input) {
              finalInput = typeof parsed.input === 'string' ? JSON.parse(parsed.input) : parsed.input;
            } else {
              finalInput = parsed;
            }
          } else {
            finalInput = input;
          }
          const result = await checkOrdersTool(finalInput);
          return JSON.stringify(result)
        } catch (err) {
          return JSON.stringify({
              error: "Invalid input format",
              detail: err.message,
          });
        }
      }
    })
    // TODO: addToCart, cancelOrder, placeOrder, checkOrderStatus...
  ];

  const executor = await initializeAgentExecutorWithOptions(tools, llm, {
    agentType: "zero-shot-react-description",
    verbose: true,
  });

  // console.log("Expected input variables:", executor.agent.llmChain.prompt.inputVariables);

  // Gh√©p tin nh·∫Øn l·ªãch s·ª≠ th√†nh context cho agent
  // const chat_history = messages.map(m => `${m.role}: ${m.content}`).join("\n");

  const result = await executor.invoke({
    input: query,
    // chat_history, // truy·ªÅn history ·ªü d·∫°ng text
  });

  console.log(result)
  return result.output;
}

// ------------------ CHITCHAT ------------------
async function chitChat(query, messages = []) {
  const llm = new ChatOpenAI({
    modelName: "gpt-4o-mini",
    temperature: 0.5,
  });

  const formattedMessages = [
    ...messages,
    { role: "user", content: query }
  ];

  const response = await llm.invoke(formattedMessages);
  return response.content.trim();
}

// ------------------ MAIN HANDLER ------------------
async function handleUserQuery(query, messages = []) {
  const intent = await router(query);

  if (intent === "RAG") {
    return await askQuestion(query, messages);
  } else if (intent === "AGENT") {
    return await runAgent(query);
  } else {
    return await chitChat(query, messages);
  }
}

module.exports = { handleUserQuery, askQuestion, runAgent, chitChat };
