const axios = require("axios");
const Product = require('../../models/Product');

async function checkOrdersTool(input) {
    try {
        // L·∫•y date t·ª´ input v·ªõi nhi·ªÅu c√°ch kh√°c nhau
        let date;
        if (input && typeof input === 'object' && input.date) {
            date = input.date;
            console.log("üìÖ Found date in input.date:", date);
        } else if (typeof input === 'string') {
            // N·∫øu input l√† string, c√≥ th·ªÉ l√† date tr·ª±c ti·∫øp
            date = input;
            console.log("üìÖ Input is string, using as date:", date);
        }
        if (!date) {
            return {
                success: false,
                message: "Vui l√≤ng cung c·∫•p ng√†y theo ƒë·ªãnh d·∫°ng YYYY-MM-DD"
            };
        }

        // Validate date format
        const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
        if (!dateRegex.test(date)) {
            return {
                success: false,
                message: "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng YYYY-MM-DD",
                debug: {
                    receivedDate: date
                }
            };
        }

        // G·ªçi API backend
        const response = await axios.get(
            `http://localhost:4000/api/order/userordersbydate`, {
                params: {
                    date: date
                },
                headers: {
                    "auth-token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgyZGJmMzc2MzhiZTQ5YWJlN2E3ZjE3In0sImlhdCI6MTc1NjEzNTk2M30.h0r3ihU9tdfXERgy2B2Dwu0mAizD9wRikqo5YZK5AUg",
                    "Content-Type": "application/json",
                },
            }
        );

        const data = response.data;

        if (!data.success || !data.orders || data.orders.length === 0) {
            return {
                success: true,
                message: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o v√†o ng√†y ${date}`
            };
        }

        // Chuy·ªÉn th√¥ng tin ƒë∆°n h√†ng th√†nh c√¢u tr·∫£ l·ªùi
        const ordersSummary = await Promise.all(data.orders.map(async (order, idx) => {
            const items = [];

            for (const [key, quantity] of Object.entries(order.cartItems)) {
                const [productId, size] = key.split("_");
                const product = await Product.findOne({ id: productId }); // l·∫•y t√™n s·∫£n ph·∫©m
                if (product) {
                    items.push(`${product.name} (Size: ${size}) x S·ªë l∆∞·ª£ng: ${quantity}`);
                }
            }

            return `${idx + 1}. ƒê∆°n h√†ng: ${items.join(", ")}, T·ªïng: $${order.finalAmount}, Tr·∫°ng th√°i: ${order.status}, Thanh to√°n: ${order.paymentStatus}`;
        }));

        return {
            success: true,
            message: `ƒê∆°n h√†ng c·ªßa b·∫°n v√†o ng√†y ${date}: ${ordersSummary}`,
        };
    } catch (err) {
        console.error("‚ùå L·ªói trong checkOrdersTool:", err);
        return {
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y ƒë∆°n h√†ng"
        };
    }
}

module.exports = checkOrdersTool